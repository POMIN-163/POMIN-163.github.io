{"meta":{"title":"Pomin","subtitle":"嵌入式软硬件","description":"某位十八线程序员....","author":"Pomin","url":"https://pomin-163.github.io","root":"/"},"pages":[{"title":"404","date":"2021-04-16T09:09:59.000Z","updated":"2021-08-21T08:53:55.339Z","comments":true,"path":"404/index.html","permalink":"https://pomin-163.github.io/404/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-04-16T06:11:56.000Z","updated":"2021-08-21T08:53:53.338Z","comments":true,"path":"categories/index.html","permalink":"https://pomin-163.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2021-04-16T06:23:48.000Z","updated":"2021-08-21T08:53:55.057Z","comments":true,"path":"contact/index.html","permalink":"https://pomin-163.github.io/contact/index.html","excerpt":"","text":""},{"title":"Hello World","date":"2021-08-21T08:53:55.140Z","updated":"2021-08-21T08:53:55.140Z","comments":true,"path":"rubbish/hello-world.html","permalink":"https://pomin-163.github.io/rubbish/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"tags","date":"2021-04-16T06:21:16.000Z","updated":"2021-08-21T08:53:55.186Z","comments":true,"path":"tags/index.html","permalink":"https://pomin-163.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"WSL 环境编译运行 ESP8266 RTOS SDK","slug":"esp8266","date":"2021-08-23T18:20:35.950Z","updated":"2021-08-23T18:20:35.950Z","comments":true,"path":"2021/08/24/esp8266/","link":"","permalink":"https://pomin-163.github.io/2021/08/24/esp8266/","excerpt":"","text":"ESP8266-Linux子系统(WSL)编译环境搭建 安装、配置 wsl (我使用的是 Debian) 安装 wsl 查看系统版本 cat &#x2F;etc&#x2F;os-release 切换软件安装源 (这里使用清华镜像)https://mirrors.tuna.tsinghua.edu.cn/help/debian/ 编辑 source.list sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; bullseye main contrib non-free # deb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; bullseye main contrib non-free deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; bullseye-updates main contrib non-free # deb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; bullseye-updates main contrib non-free deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; bullseye-backports main contrib non-free # deb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian&#x2F; bullseye-backports main contrib non-free deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security bullseye-security main contrib non-free # deb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian-security bullseye-security main contrib non-free 至此 wsl 安装已经完成，开始搭建 ESP8266 开发环境 安装常用软件sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial 报错Note, selecting &#39;python-is-python2&#39; instead of &#39;python&#39; 暂时不管，这里切忌安装 python3，SDK 的构建工具是基于 python2 的！！ 这个版本的 python 没有自带 pip，这里手动安装一下 # 安装 python2 的 pip wget --no-check-certificate https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;ez_setup.py sudo python ez_setup.py --insecure wget https:&#x2F;&#x2F;pypi.python.org&#x2F;packages&#x2F;11&#x2F;b6&#x2F;abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447&#x2F;pip-9.0.1.tar.gz#md5&#x3D;35f01da33009719497f01a4ba69d63c9 # 这里的 * 是通配符 tar -xvf *.tar.gz cd pip* # 安装 sudo python setup.py install ln -s &#x2F;usr&#x2F;local&#x2F;python27&#x2F;bin&#x2F;pip &#x2F;usr&#x2F;bin&#x2F;pip 尝试运行 pip –version 失败，原来是没有包含 pip 安装到的路径export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;bin 安装完 pip 先更新一下pip install --upgrade pip 下载交叉编译工具 (放在到实体机，因为怕哪天wsl崩了，代码无了) https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/get-started/linux-setup.html 下载 SDK (也放在实体机，时间比较长)git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;ESP8266_RTOS_SDK.git git clone 有问题 由于 github 自 2021年8月 加强了安全的啥啥啥策略，不能随便 clone 了 这里配置一下 github 的个人信息git config --global user.name &quot;名字&quot; git config --global user.email &quot;邮箱&quot; # 看一下配置信息 git config -l 接着愉快的 clone 下载完是这个样子滴… 在 wsl 中进入 SDK 的目录中安装一下 python 的依赖工具# 安装依赖 python -m pip install --user -r .&#x2F;requirements.txt 包含路径# 我下载的 SDK 目录和交叉编译工具目录 (在实体机里) # wsl 下的 &#x2F;mnt&#x2F;f&#x2F;... 就是 Windows 中的 F:&#x2F;... # 执行下面两行 export IDF_PATH&#x3D;&quot;&#x2F;mnt&#x2F;f&#x2F;MyEnv&#x2F;ESP8266&#x2F;ESP8266_RTOS_SDK&quot; export PATH&#x3D;$PATH:&#x2F;mnt&#x2F;f&#x2F;MyEnv&#x2F;ESP8266&#x2F;xtensa-lx106-elf&#x2F;bin # 有些教程是把 SDK 安装到了 ~&#x2F;esp8266 目录 # export IDF_PATH&#x3D;&quot;$HOME&#x2F;esp8266&#x2F;ESP8266_RTOS_SDK&quot; # export PATH&#x3D;$PATH:$HOME&#x2F;esp8266&#x2F;xtensa-lx106-elf&#x2F;bin # pip export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;bin # 添加 export和 path 到 shell 的环境中 # IDF_PATH 添加到 ~&#x2F;.bashrc 或 ~&#x2F;.zshrc (zsh yyds !!)中 export IDF_PATH&#x3D;&quot;&#x2F;mnt&#x2F;f&#x2F;MyEnv&#x2F;ESP8266&#x2F;ESP8266_RTOS_SDK&quot; # PATH 添加到 Windows 实体机环境变量中 (用户变量只需注销) export PATH&#x3D;$PATH:&#x2F;mnt&#x2F;f&#x2F;MyEnv&#x2F;ESP8266&#x2F;xtensa-lx106-elf&#x2F;bin Windows 实体机环境变量 进入 SDK 的例程中编译一下试试 配置串口 cd $IDF_PATH&#x2F;examples&#x2F;get-started&#x2F;hello_world make menuconfig 打开配置界面，需要控制台足够的大！！不然不运行 配置一下串口和波特率 (越高烧录越快) 我电脑的串口号是 COM27，所以 wsl 配置中串口就是 /dev/ttyS27，波特率设置成 921600，因为快！！ 编译一下 make -j8 all 编译成功后烧录 make flash 编译环境搭建完成，简单折腾折腾 为了实现随时随地的编译某个工程 (就是带有sdkconfig文件的那些文件夹)写一个powershell的脚本来帮助编译 pwd_build.ps1# 取绝对路径父路径 $path_abs = Split-Path -Parent $MyInvocation.MyCommand.Definition # 整理路径 $path_abs = $path_abs -replace \"\\\\\", \"/\" $path_abs = $path_abs -replace \"C:\", \"c\" $path_abs = $path_abs -replace \"D:\", \"d\" $path_abs = $path_abs -replace \"E:\", \"e\" $path_abs = $path_abs -replace \"F:\", \"f\" $path_abs = $path_abs -replace \"G:\", \"g\" $path_abs = $path_abs -replace \"H:\", \"h\" $path_abs = $path_abs -replace \"I:\", \"i\" $path_abs = $path_abs -replace \"J:\", \"j\" $path_abs = $path_abs -replace \"K:\", \"k\" $path_abs = \"/mnt/\" + $path_abs # 在当前工作目录下运行绝对路径中的 build.sh wsl \"$path_abs/build.sh\" build.shexport IDF_PATH&#x3D;&quot;&#x2F;mnt&#x2F;f&#x2F;MyEnv&#x2F;ESP8266&#x2F;ESP8266_RTOS_SDK&quot; export PATH&#x3D;$PATH:&#x2F;mnt&#x2F;f&#x2F;MyEnv&#x2F;ESP8266&#x2F;xtensa-lx106-elf&#x2F;bin # make menuconfig make -j8 all make flash 把两个文件放在一起 (可以放在某个环境变量里打开powershell随处调用) 运行一下试试看 make menuconfig 正常 make flash 正常 这样就可以愉快的用VSCode写代码，用这个脚本编译了 配置一下 VSCode 的 tasks.json settings.json 中设置 powershell 为默认终端\"terminal.integrated.shell.windows\": \"C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", Ctrl+Shift+B 运行编译任务 编译正常，可以愉快的写代码了","categories":[],"tags":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://pomin-163.github.io/tags/ESP8266/"},{"name":"vscode","slug":"vscode","permalink":"https://pomin-163.github.io/tags/vscode/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-23T17:01:39.677Z","updated":"2021-08-21T08:47:47.112Z","comments":true,"path":"2021/08/24/hello-world/","link":"","permalink":"https://pomin-163.github.io/2021/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"text","slug":"text","date":"2021-08-21T08:56:09.000Z","updated":"2021-08-21T08:56:09.937Z","comments":true,"path":"2021/08/21/text/","link":"","permalink":"https://pomin-163.github.io/2021/08/21/text/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://pomin-163.github.io/tags/ESP8266/"},{"name":"vscode","slug":"vscode","permalink":"https://pomin-163.github.io/tags/vscode/"}]}